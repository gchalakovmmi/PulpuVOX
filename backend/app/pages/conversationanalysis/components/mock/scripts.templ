package mock

import ()

templ Scripts() {
    <script>
        // Function to expand common contractions
        function expandContractions(text) {
            const contractions = {
                "i'm": "i am",
                "you're": "you are",
                "he's": "he is",
                "she's": "she is",
                "it's": "it is",
                "we're": "we are",
                "they're": "they are",
                "that's": "that is",
                "who's": "who is",
                "what's": "what is",
                "where's": "where is",
                "when's": "when is",
                "why's": "why is",
                "how's": "how is",
                "isn't": "is not",
                "aren't": "are not",
                "wasn't": "was not",
                "weren't": "were not",
                "haven't": "have not",
                "hasn't": "has not",
                "hadn't": "had not",
                "don't": "do not",
                "doesn't": "does not",
                "didn't": "did not",
                "won't": "will not",
                "wouldn't": "would not",
                "can't": "cannot",
                "couldn't": "could not",
                "shouldn't": "should not",
                "mightn't": "might not",
                "mustn't": "must not",
                "i'd": "i would",
                "you'd": "you would",
                "he'd": "he would",
                "she'd": "she would",
                "it'd": "it would",
                "we'd": "we would",
                "they'd": "they would",
                "i'll": "i will",
                "you'll": "you will",
                "he'll": "he will",
                "she'll": "she will",
                "it'll": "it will",
                "we'll": "we will",
                "they'll": "they will",
                "i've": "i have",
                "you've": "you have",
                "we've": "we have",
                "they've": "they have"
            };

            let expandedText = text.toLowerCase();
            for (const [contraction, expansion] of Object.entries(contractions)) {
                const regex = new RegExp('\\b' + contraction + '\\b', 'gi');
                expandedText = expandedText.replace(regex, expansion);
            }
            return expandedText;
        }

        document.addEventListener('DOMContentLoaded', function() {
            // Try to get conversation from sessionStorage first
            const conversationHistory = JSON.parse(sessionStorage.getItem('currentConversation'));
            
            if (conversationHistory) {
                displayConversation(conversationHistory);
            } else {
                // Fall back to API call if no conversation in sessionStorage
                fetch('/api/conversation/latest')
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('No conversation found');
                        }
                        return response.json();
                    })
                    .then(history => {
                        displayConversation(history);
                    })
                    .catch(error => {
                        console.error('Error fetching conversation:', error);
                        document.getElementById('conversation-history').textContent = 
                            'No conversation history found.';
                    });
            }

            function displayConversation(history) {
                const container = document.getElementById('conversation-history');
                container.innerHTML = ''; // Clear loading message
                
                history.forEach(turn => {
                    const div = document.createElement('div');
                    div.className = turn.role === 'user' ? 'user-message' : 'assistant-message';
                    
                    const roleSpan = document.createElement('strong');
                    roleSpan.textContent = turn.role + ': ';
                    
                    const contentSpan = document.createElement('span');
                    contentSpan.textContent = turn.content;
                    
                    div.appendChild(roleSpan);
                    div.appendChild(contentSpan);
                    
                    // Add suggestion if available
                    if (turn.suggestion !== undefined) {
                        // Expand contractions and normalize for comparison
                        const expandedSuggestion = expandContractions(turn.suggestion);
                        const expandedContent = expandContractions(turn.content);
                        
                        const normalizedSuggestion = expandedSuggestion
                            .replace(/[\u2018\u2019]/g, "'")
                            .replace(/[.,!?;]$/, '')
                            .trim();
                        
                        const normalizedContent = expandedContent
                            .replace(/[\u2018\u2019]/g, "'")
                            .replace(/[.,!?;]$/, '')
                            .trim();
                        
                        if (normalizedSuggestion === normalizedContent || normalizedSuggestion === '') {
                            // Show positive feedback for correct sentences
                            const positiveDiv = document.createElement('div');
                            positiveDiv.className = 'positive-feedback';
                            positiveDiv.innerHTML = 'âœ“ Good job! Your sentence is correct.';
                            div.appendChild(positiveDiv);
                        } else {
                            // Show suggestion for incorrect sentences
                            const suggestionDiv = document.createElement('div');
                            suggestionDiv.className = 'suggestion';
                            suggestionDiv.innerHTML = '<strong>Suggestion:</strong> ' + turn.suggestion;
                            div.appendChild(suggestionDiv);
                        }
                    }
                    
                    container.appendChild(div);
                });
            }
        });
    </script>
}
